{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview The Open Authenticator is an open source TOTP based hardware authenticator using ESP32. In layman's terms, this does what Google Authenticator or Authy does. This uses a custom built pcb and a 3d case, also it uses a firmware built for this purpose using esp-idf, uses lvgl as the GUI library. The features of open authenticator's printer circuit board are: Small form factor of 82mm x 42mm Uses ESP32-WROOM-32D module Uses 128x64 0.96\" inch OLED panel Uses DS3231 RTC with battery backup (CR2032) for timekeeping Powered by 3.7V 300 mAh LiPo battery Uses MCP73831 for charging LiPo battery Uses TPS63001 Buck Boost Converter IC for efficient 3.3V power supply, with input range from 1.8V - 5.5V Uses TPS22919 Load switch to control power to OLED and RTC chip Autoselect power source, i.e., battery or USB USB Type-C for charging only (no data pins connected) Media Coverage Hackster.io: TOTP-Based Open Hardware Authenticator Powered by an ESP32 Microcontroller Project logs Hackaday: https://hackaday.io/project/176959-open-authenticator Join the Discussion: Discord: https://discord.gg/kVDdB9kAEP Repositories PCB Design: https://github.com/Open-Authenticator/hardware-design Firmware: https://github.com/Open-Authenticator/open-authenticator-app 3D-Case: https://github.com/Open-Authenticator/3d-case Ordering PCB Components Bill of Material Sponsors OSHPark - Thanks to OSHPark for sponsoring first prototype PCBWay - Thanks to PCBway for sponsoring the final prototype Asahitec - Thanks for discounts on stencil","title":"Overview"},{"location":"#overview","text":"The Open Authenticator is an open source TOTP based hardware authenticator using ESP32. In layman's terms, this does what Google Authenticator or Authy does. This uses a custom built pcb and a 3d case, also it uses a firmware built for this purpose using esp-idf, uses lvgl as the GUI library. The features of open authenticator's printer circuit board are: Small form factor of 82mm x 42mm Uses ESP32-WROOM-32D module Uses 128x64 0.96\" inch OLED panel Uses DS3231 RTC with battery backup (CR2032) for timekeeping Powered by 3.7V 300 mAh LiPo battery Uses MCP73831 for charging LiPo battery Uses TPS63001 Buck Boost Converter IC for efficient 3.3V power supply, with input range from 1.8V - 5.5V Uses TPS22919 Load switch to control power to OLED and RTC chip Autoselect power source, i.e., battery or USB USB Type-C for charging only (no data pins connected)","title":"Overview"},{"location":"#media-coverage","text":"Hackster.io: TOTP-Based Open Hardware Authenticator Powered by an ESP32 Microcontroller","title":"Media Coverage"},{"location":"#project-logs","text":"Hackaday: https://hackaday.io/project/176959-open-authenticator","title":"Project logs"},{"location":"#join-the-discussion","text":"Discord: https://discord.gg/kVDdB9kAEP","title":"Join the Discussion:"},{"location":"#repositories","text":"PCB Design: https://github.com/Open-Authenticator/hardware-design Firmware: https://github.com/Open-Authenticator/open-authenticator-app 3D-Case: https://github.com/Open-Authenticator/3d-case","title":"Repositories"},{"location":"#ordering","text":"","title":"Ordering"},{"location":"#pcb","text":"","title":"PCB"},{"location":"#components","text":"Bill of Material","title":"Components"},{"location":"#sponsors","text":"OSHPark - Thanks to OSHPark for sponsoring first prototype PCBWay - Thanks to PCBway for sponsoring the final prototype Asahitec - Thanks for discounts on stencil","title":"Sponsors"},{"location":"gallery/","text":"Gallery Final Build PCB Prototype PCB Perfboard board prototype","title":"Gallery"},{"location":"gallery/#gallery","text":"","title":"Gallery"},{"location":"gallery/#final-build-pcb","text":"","title":"Final Build PCB"},{"location":"gallery/#prototype-pcb","text":"","title":"Prototype PCB"},{"location":"gallery/#perfboard-board-prototype","text":"","title":"Perfboard board prototype"},{"location":"software-upload/","text":"Software Upload Requirements ESP-IDF v4.2 ( release/v4.2 ) Open-Authenticator board USB-UART convertor board (to flash firmware) Install instructions are available here . Make sure to install v4.2 (step 2 in the given link). Compile firmware git clone --recurse-submodules https://github.com/Open-Authenticator/open-authenticator-app.git cd open-authenticator-app # activate esp-idf environment (get_idf) get_idf # build firmare idf.py build Flash firmware 1) Connect USB-UART to open-authenticator UART port connect as follows USB-UART----|== RX ==> --- <== TX ==|----Open Authenticator UART port | | |== TX ==> --- <== RX ==| It should look like this after being connected 2) Connect USB Type-C to power the board It is necessary to power the board using usb while flashing firmware. Both the usb to uart convertor and open authenticator board must be powered by same power source, as we haven't connected ground of the convertor to that of board. If one wants to flash without powering it up with usb, connect ground of usb-uart convertor to the shield of the usb-c port. 3) Put board in download mode While board is powered on, press BOOT/SELECT button, and simultaneously press RESET button. Leave the BOOT/SELECT button after a few seconds. 4) Flash firmware idf.py flash After it successfully flashes, press RESET and see it come to power, use the buttons to navigate and use it.","title":"Upload Software"},{"location":"software-upload/#software-upload","text":"","title":"Software Upload"},{"location":"software-upload/#requirements","text":"ESP-IDF v4.2 ( release/v4.2 ) Open-Authenticator board USB-UART convertor board (to flash firmware) Install instructions are available here . Make sure to install v4.2 (step 2 in the given link).","title":"Requirements"},{"location":"software-upload/#compile-firmware","text":"git clone --recurse-submodules https://github.com/Open-Authenticator/open-authenticator-app.git cd open-authenticator-app # activate esp-idf environment (get_idf) get_idf # build firmare idf.py build","title":"Compile firmware"},{"location":"software-upload/#flash-firmware","text":"","title":"Flash firmware"},{"location":"software-upload/#1-connect-usb-uart-to-open-authenticator-uart-port","text":"connect as follows USB-UART----|== RX ==> --- <== TX ==|----Open Authenticator UART port | | |== TX ==> --- <== RX ==| It should look like this after being connected","title":"1) Connect USB-UART to open-authenticator UART port"},{"location":"software-upload/#2-connect-usb-type-c-to-power-the-board","text":"It is necessary to power the board using usb while flashing firmware. Both the usb to uart convertor and open authenticator board must be powered by same power source, as we haven't connected ground of the convertor to that of board. If one wants to flash without powering it up with usb, connect ground of usb-uart convertor to the shield of the usb-c port.","title":"2) Connect USB Type-C to power the board"},{"location":"software-upload/#3-put-board-in-download-mode","text":"While board is powered on, press BOOT/SELECT button, and simultaneously press RESET button. Leave the BOOT/SELECT button after a few seconds.","title":"3) Put board in download mode"},{"location":"software-upload/#4-flash-firmware","text":"idf.py flash After it successfully flashes, press RESET and see it come to power, use the buttons to navigate and use it.","title":"4) Flash firmware"}]}